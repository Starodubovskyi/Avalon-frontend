.tabWrapper {
  width: 100%;
  max-width: 28rem; /* max-w-md */
}

.tabList {
  display: grid;
  width: 100%;
  grid-template-columns: repeat(2, 1fr);
  margin-bottom: 1.5rem;
  margin-top: 1rem;
}

.tabTrigger {
  padding: 0.875rem 1.5rem; /* py-3.5 px-6 */
  border: none;
  border-radius: 9999px;
  color: #1f2937; /* text-gray-900 */
  background-color: #e5e7eb; /* bg-gray-200 */
  box-shadow: 4px 8px 19px -3px rgba(0, 0, 0, 0.27);
  transition: all 250ms ease-in-out;
  cursor: pointer;
}

.tabTrigger:hover {
  color: #e5e7eb; /* hover:text-gray-200 */
  background-color: #111827; /* hover:bg-gray-900 */
  transform: scale(1.05);
}

/* active state (for class toggle or data-state attr in UI lib like radix) */
.tabTrigger[data-state="active"] {
  background-color: #111827;
  color: #e5e7eb;
}

.tabWrapper {
  /* Возможно, вам не нужно здесь много стилей, так как позиционирование
     теперь управляется родительским div в AuthTabs.tsx */
  width: 100%; /* Убедимся, что Tabs занимает всю ширину */
  display: flex; /* Добавим flex для Tabs, чтобы управлять его внутренними элементами */
  flex-direction: column; /* Позволяет TabsList быть сверху, а TabsContent под ним */
  align-items: center; /* Центрирует TabsList */
}

.tabList {
  display: inline-flex; /* Используем inline-flex, чтобы список кнопок был компактным */
  /* margin-bottom: 1rem; */
  border-radius: 30rem; /* Если вы хотите закругленные края */
  background-color: #f3f4f6; /* Светлый фон для списка вкладок */
  padding: 0.25rem;
}

.tabTrigger {
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
  font-weight: 500;
  color: #6b7280;

  background-color: transparent;
  border-radius: 15rem; /* Немного закругленные углы для отдельных кнопок */
  cursor: pointer;
  transition: all 0.2s ease-in-out;
}

.tabTrigger[data-state="active"] {
  background-color: white;
  color: #1f2937;
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); /* Легкая тень для активной кнопки */
}
